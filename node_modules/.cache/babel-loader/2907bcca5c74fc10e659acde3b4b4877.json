{"ast":null,"code":"var _jsxFileName = \"/home/hsetiawan/git-android/star-wars-movie-with-react/src/list/list.js\";\nimport React, { Component } from 'react'; // const API = 'https://swapi.co/api/films/';\n// const DEFAULT_QUERY = 'redux';\n\nclass List extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      films: [],\n      isLoading: true,\n      error: null\n    };\n  }\n\n  fetchFilms() {\n    // Where we're fetching data from\n    fetch(\"https://swapi.co/api/films/\") // We get the API response and receive data in JSON format...\n    .then(response => response.json()) // ...then we update the users state\n    .then(data => this.setState({\n      films: data,\n      isLoading: false\n    })) // Catch any errors we hit and update the app\n    .catch(error => this.setState({\n      error,\n      isLoading: false\n    }));\n  }\n\n  componentDidMount() {\n    this.fetchFilms();\n  }\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          films = _this$state.films,\n          error = _this$state.error;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Random User\"), error ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, error.message) : null, !isLoading ? films.map(film => {\n      const title = film.title;\n      return React.createElement(\"div\", {\n        key: title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Name: \", title), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }));\n    }) // If there is a delay in data, let's let the user know it's loading\n    : React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Loading...\"));\n  }\n\n}\n\nexport default List;","map":{"version":3,"sources":["/home/hsetiawan/git-android/star-wars-movie-with-react/src/list/list.js"],"names":["React","Component","List","constructor","props","state","films","isLoading","error","fetchFilms","fetch","then","response","json","data","setState","catch","componentDidMount","render","message","map","film","title"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B,C,CAEA;AACA;;AAEA,MAAMC,IAAN,SAAmBD,SAAnB,CAA6B;AAC3BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,SAAS,EAAE,IAFA;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKD;;AACDC,EAAAA,UAAU,GAAG;AACb;AACAC,IAAAA,KAAK,+BAAL,CACE;AADF,KAEGC,IAFH,CAEQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFpB,EAGE;AAHF,KAIGF,IAJH,CAIQG,IAAI,IACR,KAAKC,QAAL,CAAc;AACZT,MAAAA,KAAK,EAAEQ,IADK;AAEZP,MAAAA,SAAS,EAAE;AAFC,KAAd,CALJ,EAUE;AAVF,KAWGS,KAXH,CAWSR,KAAK,IAAI,KAAKO,QAAL,CAAc;AAAEP,MAAAA,KAAF;AAASD,MAAAA,SAAS,EAAE;AAApB,KAAd,CAXlB;AAYC;;AACDU,EAAAA,iBAAiB,GAAG;AAClB,SAAKR,UAAL;AACD;;AAEDS,EAAAA,MAAM,GAAG;AAAA,wBAC6B,KAAKb,KADlC;AAAA,UACCE,SADD,eACCA,SADD;AAAA,UACYD,KADZ,eACYA,KADZ;AAAA,UACmBE,KADnB,eACmBA,KADnB;AAEL,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEOA,KAAK,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,KAAK,CAACW,OAAV,CAAH,GAA4B,IAFxC,EAGO,CAACZ,SAAD,GACDD,KAAK,CAACc,GAAN,CAAUC,IAAI,IAAI;AAAA,YACRC,KADQ,GACED,IADF,CACRC,KADQ;AAEhB,aACE;AAAK,QAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAUA,KAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAMD,KARD,CADC,CAUD;AAVC,MAYD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAfN,CADF;AAqBD;;AApDwB;;AAwD7B,eAAepB,IAAf","sourcesContent":["import React,{Component} from 'react';\n\n// const API = 'https://swapi.co/api/films/';\n// const DEFAULT_QUERY = 'redux';\n\nclass List extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      films: [],\n      isLoading: true,\n      error: null\n    };\n  }\n  fetchFilms() {\n  // Where we're fetching data from\n  fetch(`https://swapi.co/api/films/`)\n    // We get the API response and receive data in JSON format...\n    .then(response => response.json())\n    // ...then we update the users state\n    .then(data =>\n      this.setState({\n        films: data,\n        isLoading: false,\n      })\n    )\n    // Catch any errors we hit and update the app\n    .catch(error => this.setState({ error, isLoading: false }));\n  }\n  componentDidMount() {\n    this.fetchFilms();\n  }\n\n  render() {\n    const { isLoading, films, error } = this.state;\n      return (\n        <React.Fragment>\n            <h1>Random User</h1>\n              {error ? <p>{error.message}</p> : null}\n              {!isLoading ? (\n              films.map(film => {\n                const { title } = film;\n                return (\n                  <div key={title}>\n                    <p>Name: {title}</p>\n                    <hr />\n                  </div>\n                );\n              })\n              // If there is a delay in data, let's let the user know it's loading\n              ) : (\n              <h3>Loading...</h3>\n              )}\n\n        </React.Fragment>\n      );\n    }\n\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}