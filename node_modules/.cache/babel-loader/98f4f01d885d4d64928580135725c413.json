{"ast":null,"code":"var _jsxFileName = \"/home/hsetiawan/git-android/star-wars-movie-with-react/src/list/planet/planet.js\";\nimport React, { Component } from 'react'; // const API = 'https://swapi.co/api/films/';\n// const DEFAULT_QUERY = 'redux';\n\nclass Planets extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      planets: {},\n      isLoading: true,\n      error: null\n    };\n  }\n\n  fetchFilms() {\n    fetch(\"https://swapi.co/api/planets/?format=json\").then(response => response.json()).then(data => this.setState({\n      planets: data.results,\n      isLoading: false\n    })).catch(error => this.setState({\n      error,\n      isLoading: false\n    }));\n  }\n\n  componentDidMount() {\n    this.fetchFilms();\n  }\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          planets = _this$state.planets,\n          error = _this$state.error;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, error ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, error.message) : null, !isLoading ? planets.map(planet => {\n      const name = planet.name;\n      return React.createElement(\"div\", {\n        key: name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Name: \", name), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }));\n    }) : React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Loading...\"));\n  }\n\n}\n\nexport default Planets;","map":{"version":3,"sources":["/home/hsetiawan/git-android/star-wars-movie-with-react/src/list/planet/planet.js"],"names":["React","Component","Planets","constructor","props","state","planets","isLoading","error","fetchFilms","fetch","then","response","json","data","setState","results","catch","componentDidMount","render","message","map","planet","name"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B,C,CAEA;AACA;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAC9BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXC,MAAAA,SAAS,EAAE,IAFA;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKD;;AAEDC,EAAAA,UAAU,GAAG;AACbC,IAAAA,KAAK,6CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,IAAI,IACR,KAAKC,QAAL,CAAc;AACZT,MAAAA,OAAO,EAAEQ,IAAI,CAACE,OADF;AAEZT,MAAAA,SAAS,EAAE;AAFC,KAAd,CAHJ,EAQGU,KARH,CAQST,KAAK,IAAI,KAAKO,QAAL,CAAc;AAAEP,MAAAA,KAAF;AAASD,MAAAA,SAAS,EAAE;AAApB,KAAd,CARlB;AASC;;AAEDW,EAAAA,iBAAiB,GAAG;AAClB,SAAKT,UAAL;AACD;;AAEDU,EAAAA,MAAM,GAAG;AAAA,wBAC+B,KAAKd,KADpC;AAAA,UACCE,SADD,eACCA,SADD;AAAA,UACYD,OADZ,eACYA,OADZ;AAAA,UACqBE,KADrB,eACqBA,KADrB;AAEL,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACOA,KAAK,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,KAAK,CAACY,OAAV,CAAH,GAA4B,IADxC,EAEO,CAACb,SAAD,GACDD,OAAO,CAACe,GAAR,CAAYC,MAAM,IAAI;AAAA,YACZC,IADY,GACHD,MADG,CACZC,IADY;AAEpB,aACE;AAAK,QAAA,GAAG,EAAEA,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAUA,IAAV,CADF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CADF;AAOD,KATD,CADC,GAYD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAdN,CADF;AAoBD;;AAjD2B;;AAqDhC,eAAerB,OAAf","sourcesContent":["import React,{Component} from 'react';\n\n// const API = 'https://swapi.co/api/films/';\n// const DEFAULT_QUERY = 'redux';\n\nclass Planets extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      planets: {},\n      isLoading: true,\n      error: null\n    };\n  }\n\n  fetchFilms() {\n  fetch(`https://swapi.co/api/planets/?format=json`)\n    .then(response => response.json())\n    .then(data =>\n      this.setState({\n        planets: data.results,\n        isLoading: false,\n      })\n    )\n    .catch(error => this.setState({ error, isLoading: false }));\n  }\n\n  componentDidMount() {\n    this.fetchFilms();\n  }\n\n  render() {\n    const { isLoading, planets, error } = this.state;\n      return (\n        <React.Fragment>\n              {error ? <p>{error.message}</p> : null}\n              {!isLoading ? (\n              planets.map(planet => {\n                const { name } = planet;\n                return (\n                  <div key={name}>\n                    <p>Name: {name}</p>\n\n                    <hr />\n                  </div>\n                );\n              })\n              ) : (\n              <h3>Loading...</h3>\n              )}\n\n        </React.Fragment>\n      );\n    }\n\n}\n\nexport default Planets;\n"]},"metadata":{},"sourceType":"module"}